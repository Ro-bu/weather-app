(()=>{"use strict";async function e(e){try{document.querySelector("#error-message").classList.remove("visible");let t=await async function(e){try{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=baac41a7e5b76faee9dffe7731316230&units=metric`,{mode:"cors"});return await t.json()}catch(e){console.log(e)}}(e);document.querySelector("#location-name").textContent=t.name+", "+t.sys.country,document.querySelector("#temperature").textContent=Math.floor(t.main.temp),document.querySelector("#description").textContent=t.weather[0].description.charAt(0).toUpperCase()+t.weather[0].description.slice(1),document.querySelector("#feels-like").textContent=Math.floor(t.main.feels_like),document.querySelector("#wind").textContent=`WIND: ${Math.floor(10*t.wind.speed)/10} m/s`,document.querySelector("#pressure").textContent=`PRESSURE: ${t.main.pressure}`,document.querySelector("#humidity").textContent=`HUMIDITY: ${t.main.humidity}%`}catch(e){console.log(e),document.querySelector("#location-name").textContent="Oops...",document.querySelector("#error-message").classList.add("visible")}}e("tallinn"),document.querySelector("#search-button").addEventListener("click",(()=>{e(document.querySelector("#location").value),document.querySelector("#location").value=""})),document.querySelector("#location").addEventListener("keyup",(t=>{"Enter"===t.key&&(e(document.querySelector("#location").value),document.querySelector("#location").value="")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBRUFBLGVBQWVDLEVBQVlDLEdBQ3ZCLElBQ0lDLFNBQVNDLGNBQWMsa0JBQWtCQyxVQUFVQyxPQUFPLFdBQzFELElBQUlDLFFDTFpQLGVBQTZCRSxHQUN6QixJQUNJLE1BQU1NLFFBQTRCQyxNQUFNLHFEQUFxRFAsd0RBQWdFLENBQUNRLEtBQU0sU0FFcEssYUFEMkJGLEVBQW9CRyxPQUVqRCxNQUFPQyxHQUNMQyxRQUFRQyxJQUFJRixJRERZRyxDQUFhYixHQUNyQ0MsU0FBU0MsY0FBYyxrQkFBa0JZLFlBQWNULEVBQVlVLEtBQU8sS0FBT1YsRUFBWVcsSUFBSUMsUUFDakdoQixTQUFTQyxjQUFjLGdCQUFnQlksWUFBY0ksS0FBS0MsTUFBTWQsRUFBWWUsS0FBS0MsTUFDakZwQixTQUFTQyxjQUFjLGdCQUFnQlksWUFBY1QsRUFBWWlCLFFBQVEsR0FBR0MsWUFBWUMsT0FBTyxHQUFHQyxjQUFnQnBCLEVBQVlpQixRQUFRLEdBQUdDLFlBQVlHLE1BQU0sR0FDM0p6QixTQUFTQyxjQUFjLGVBQWVZLFlBQWNJLEtBQUtDLE1BQU1kLEVBQVllLEtBQUtPLFlBQ2hGMUIsU0FBU0MsY0FBYyxTQUFTWSxZQUFjLFNBQVNJLEtBQUtDLE1BQTZCLEdBQXZCZCxFQUFZdUIsS0FBS0MsT0FBVSxTQUM3RjVCLFNBQVNDLGNBQWMsYUFBYVksWUFBYyxhQUFhVCxFQUFZZSxLQUFLVSxXQUNoRjdCLFNBQVNDLGNBQWMsYUFBYVksWUFBYyxhQUFhVCxFQUFZZSxLQUFLVyxZQUNsRixNQUFNQyxHQUNKckIsUUFBUUMsSUFBSW9CLEdBQ1ovQixTQUFTQyxjQUFjLGtCQUFrQlksWUFBYyxVQUN2RGIsU0FBU0MsY0FBYyxrQkFBa0JDLFVBQVU4QixJQUFJLFlFZC9EbEMsRUFBVyxXQUVYRSxTQUFTQyxjQUFjLGtCQUFrQmdDLGlCQUFpQixTQUFTLEtBRS9EbkMsRUFEbUJFLFNBQVNDLGNBQWMsYUFBYWlDLE9BRXZEbEMsU0FBU0MsY0FBYyxhQUFhaUMsTUFBUSxNQUdoRGxDLFNBQVNDLGNBQWMsYUFBYWdDLGlCQUFpQixTQUFVRSxJQUM5QyxVQUFWQSxFQUFFQyxNQUVEdEMsRUFEbUJFLFNBQVNDLGNBQWMsYUFBYWlDLE9BRXZEbEMsU0FBU0MsY0FBYyxhQUFhaUMsTUFBUSxRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvcG9wdWxhdGVVaS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9mZXRjaHdlYXRoZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmZXRjaFdlYXRoZXJ9IGZyb20gXCIuL2ZldGNod2VhdGhlci5qc1wiO1xuXG5hc3luYyBmdW5jdGlvbiBwb3B1bGF0ZVVpIChsb2NhdGlvbikge1xuICAgIHRyeXtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlcnJvci1tZXNzYWdlXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXNpYmxlXCIpO1xuICAgICAgICBsZXQgd2VhdGhlckRhdGEgPSBhd2FpdCBmZXRjaFdlYXRoZXIobG9jYXRpb24pO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvY2F0aW9uLW5hbWVcIikudGV4dENvbnRlbnQgPSB3ZWF0aGVyRGF0YS5uYW1lICsgXCIsIFwiICsgd2VhdGhlckRhdGEuc3lzLmNvdW50cnk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGVtcGVyYXR1cmVcIikudGV4dENvbnRlbnQgPSBNYXRoLmZsb29yKHdlYXRoZXJEYXRhLm1haW4udGVtcCk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGVzY3JpcHRpb25cIikudGV4dENvbnRlbnQgPSB3ZWF0aGVyRGF0YS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd2VhdGhlckRhdGEud2VhdGhlclswXS5kZXNjcmlwdGlvbi5zbGljZSgxKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmZWVscy1saWtlXCIpLnRleHRDb250ZW50ID0gTWF0aC5mbG9vcih3ZWF0aGVyRGF0YS5tYWluLmZlZWxzX2xpa2UpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dpbmRcIikudGV4dENvbnRlbnQgPSBgV0lORDogJHtNYXRoLmZsb29yKHdlYXRoZXJEYXRhLndpbmQuc3BlZWQqMTApLzEwfSBtL3NgO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByZXNzdXJlXCIpLnRleHRDb250ZW50ID0gYFBSRVNTVVJFOiAke3dlYXRoZXJEYXRhLm1haW4ucHJlc3N1cmV9YDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNodW1pZGl0eVwiKS50ZXh0Q29udGVudCA9IGBIVU1JRElUWTogJHt3ZWF0aGVyRGF0YS5tYWluLmh1bWlkaXR5fSVgO1xuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvY2F0aW9uLW5hbWVcIikudGV4dENvbnRlbnQgPSBcIk9vcHMuLi5cIjtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlcnJvci1tZXNzYWdlXCIpLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpO1xuICAgIH1cblxufTtcblxuZXhwb3J0IHtwb3B1bGF0ZVVpfTsiLCJhc3luYyBmdW5jdGlvbiBmZXRjaFdlYXRoZXIgKGxvY2F0aW9uKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2VGb3JMb2NhdGlvbiA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7bG9jYXRpb259JkFQUElEPWJhYWM0MWE3ZTViNzZmYWVlOWRmZmU3NzMxMzE2MjMwJnVuaXRzPW1ldHJpY2AsIHttb2RlOiBcImNvcnNcIn0pO1xuICAgICAgICBjb25zdCBsb2NhdGlvbkRhdGEgPSBhd2FpdCByZXNwb25zZUZvckxvY2F0aW9uLmpzb24oKTtcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uRGF0YTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9O1xufTtcblxuZXhwb3J0IHtmZXRjaFdlYXRoZXJ9OyIsImltcG9ydCB7cG9wdWxhdGVVaX0gZnJvbSBcIi4vcG9wdWxhdGVVaS5qc1wiO1xuXG5wb3B1bGF0ZVVpKFwidGFsbGlublwiKTtcblxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgbGV0IGxvY2F0aW9uTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG9jYXRpb25cIikudmFsdWU7XG4gICAgcG9wdWxhdGVVaShsb2NhdGlvbk5hbWUpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG9jYXRpb25cIikudmFsdWUgPSBcIlwiO1xufSk7XG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG9jYXRpb25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChlKSA9PiB7XG4gICAgaWYoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICBsZXQgbG9jYXRpb25OYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsb2NhdGlvblwiKS52YWx1ZTtcbiAgICAgICAgcG9wdWxhdGVVaShsb2NhdGlvbk5hbWUpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvY2F0aW9uXCIpLnZhbHVlID0gXCJcIjtcbiAgICB9O1xufSk7Il0sIm5hbWVzIjpbImFzeW5jIiwicG9wdWxhdGVVaSIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwid2VhdGhlckRhdGEiLCJyZXNwb25zZUZvckxvY2F0aW9uIiwiZmV0Y2giLCJtb2RlIiwianNvbiIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaFdlYXRoZXIiLCJ0ZXh0Q29udGVudCIsIm5hbWUiLCJzeXMiLCJjb3VudHJ5IiwiTWF0aCIsImZsb29yIiwibWFpbiIsInRlbXAiLCJ3ZWF0aGVyIiwiZGVzY3JpcHRpb24iLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiZmVlbHNfbGlrZSIsIndpbmQiLCJzcGVlZCIsInByZXNzdXJlIiwiaHVtaWRpdHkiLCJlcnJvciIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsImUiLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9